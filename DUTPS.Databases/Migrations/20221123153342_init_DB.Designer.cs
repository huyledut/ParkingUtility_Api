// <auto-generated />
using System;
using DUTPS.Databases;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DUTPS.Databases.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20221123153342_init_DB")]
    partial class init_DB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DUTPS.Databases.Schemas.Authentication.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasComment("primary key of table and auto increase");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasComment("the time that the record was inserted");

                    b.Property<bool>("DelFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("del_flag")
                        .HasComment("true = deleted; false = available");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at")
                        .HasComment("the time that the record was deleted");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("email")
                        .HasComment("email");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("bytea")
                        .HasColumnName("password_hash")
                        .HasComment("password hash");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("bytea")
                        .HasColumnName("password_salt")
                        .HasComment("password salt");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role")
                        .HasComment("role of account of user");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status")
                        .HasComment("status of account of user");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasComment("record's last update time");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("username")
                        .HasComment("username of user (sv id)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DUTPS.Databases.Schemas.Authentication.UserInfo", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id")
                        .HasColumnOrder(1)
                        .HasComment("primary key to identity the user");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("date")
                        .HasColumnName("birthday")
                        .HasComment("birthday of user");

                    b.Property<string>("Class")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("class")
                        .HasComment("class name of user");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasComment("the time that the record was inserted");

                    b.Property<bool>("DelFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("del_flag")
                        .HasComment("true = deleted; false = available");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at")
                        .HasComment("the time that the record was deleted");

                    b.Property<string>("FacultyId")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("faculty_id")
                        .HasComment("Faculty Id Of User");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender")
                        .HasComment("gender of user");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name")
                        .HasComment("name of user");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("phoneNumber")
                        .HasComment("phone number of user");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasComment("record's last update time");

                    b.HasKey("UserId");

                    b.HasIndex("FacultyId");

                    b.ToTable("UserInfos");
                });

            modelBuilder.Entity("DUTPS.Databases.Schemas.General.Faculty", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("id")
                        .HasComment("Id of faculty");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasComment("the time that the record was inserted");

                    b.Property<bool>("DelFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("del_flag")
                        .HasComment("true = deleted; false = available");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at")
                        .HasComment("the time that the record was deleted");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name")
                        .HasComment("Name of Faculty");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasComment("record's last update time");

                    b.HasKey("Id");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("DUTPS.Databases.Schemas.Vehicals.CheckIn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasComment("primary key of table and auto increase");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasComment("the time that the record was inserted");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateOfCheckIn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("DelFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("del_flag")
                        .HasComment("true = deleted; false = available");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at")
                        .HasComment("the time that the record was deleted");

                    b.Property<bool>("IsCheckOut")
                        .HasColumnType("boolean");

                    b.Property<long>("StaffId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasComment("record's last update time");

                    b.Property<long>("VehicalId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("StaffId");

                    b.HasIndex("VehicalId");

                    b.ToTable("CheckIns");
                });

            modelBuilder.Entity("DUTPS.Databases.Schemas.Vehicals.CheckOut", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasComment("primary key of table and auto increase");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CheckInId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasComment("the time that the record was inserted");

                    b.Property<DateTime>("DateOfCheckOut")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("DelFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("del_flag")
                        .HasComment("true = deleted; false = available");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at")
                        .HasComment("the time that the record was deleted");

                    b.Property<long>("StaffId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasComment("record's last update time");

                    b.HasKey("Id");

                    b.HasIndex("CheckInId")
                        .IsUnique();

                    b.HasIndex("StaffId");

                    b.ToTable("CheckOuts");
                });

            modelBuilder.Entity("DUTPS.Databases.Schemas.Vehicals.Vehical", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasColumnOrder(1)
                        .HasComment("primary key of table and auto increase");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasComment("the time that the record was inserted");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<bool>("DelFlag")
                        .HasColumnType("boolean")
                        .HasColumnName("del_flag")
                        .HasComment("true = deleted; false = available");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at")
                        .HasComment("the time that the record was deleted");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("character varying(16)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at")
                        .HasComment("record's last update time");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Vehicals");
                });

            modelBuilder.Entity("DUTPS.Databases.Schemas.Authentication.UserInfo", b =>
                {
                    b.HasOne("DUTPS.Databases.Schemas.General.Faculty", "Faculty")
                        .WithMany("Users")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("DUTPS.Databases.Schemas.Authentication.User", "User")
                        .WithOne("Information")
                        .HasForeignKey("DUTPS.Databases.Schemas.Authentication.UserInfo", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Faculty");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DUTPS.Databases.Schemas.Vehicals.CheckIn", b =>
                {
                    b.HasOne("DUTPS.Databases.Schemas.Authentication.User", "Customer")
                        .WithMany("CustomerCheckIns")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DUTPS.Databases.Schemas.Authentication.User", "Staff")
                        .WithMany("StaffCheckIns")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DUTPS.Databases.Schemas.Vehicals.Vehical", "Vehical")
                        .WithMany("CheckIns")
                        .HasForeignKey("VehicalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Staff");

                    b.Navigation("Vehical");
                });

            modelBuilder.Entity("DUTPS.Databases.Schemas.Vehicals.CheckOut", b =>
                {
                    b.HasOne("DUTPS.Databases.Schemas.Vehicals.CheckIn", "CheckIn")
                        .WithOne("CheckOut")
                        .HasForeignKey("DUTPS.Databases.Schemas.Vehicals.CheckOut", "CheckInId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DUTPS.Databases.Schemas.Authentication.User", "Staff")
                        .WithMany("StaffCheckOuts")
                        .HasForeignKey("StaffId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CheckIn");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("DUTPS.Databases.Schemas.Vehicals.Vehical", b =>
                {
                    b.HasOne("DUTPS.Databases.Schemas.Authentication.User", "Customer")
                        .WithMany("Vehicals")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("DUTPS.Databases.Schemas.Authentication.User", b =>
                {
                    b.Navigation("CustomerCheckIns");

                    b.Navigation("Information");

                    b.Navigation("StaffCheckIns");

                    b.Navigation("StaffCheckOuts");

                    b.Navigation("Vehicals");
                });

            modelBuilder.Entity("DUTPS.Databases.Schemas.General.Faculty", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DUTPS.Databases.Schemas.Vehicals.CheckIn", b =>
                {
                    b.Navigation("CheckOut");
                });

            modelBuilder.Entity("DUTPS.Databases.Schemas.Vehicals.Vehical", b =>
                {
                    b.Navigation("CheckIns");
                });
#pragma warning restore 612, 618
        }
    }
}
